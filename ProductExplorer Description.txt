Developer creates a git repository with 
main
developer 
document (at least this one)   

On Customer's desk 
Install git 
Add a setup dialog box (and set modified flag) 
Make sure going to appropriate extension 

At the begining, do the init / clone (if remote) 

After each end of editprocessitem 
	Do the add/commit batch 

Then handle all the tree commands 
Add a context menu - 
Edit 
Delete 
Copy / paste - to a different folder 
Don't allow the drag and drop 
Label editing - changes the name of the underlying file 


Article: Q222905
Product(s): Microsoft C Compiler
Version(s): winnt:
Operating System(s): 
Keyword(s): kbCmnCtrls kbCtrl kbMenu kbMFC kbTreeView KbUIDesign kbVC kbGrpDSMFCATL
Last Modified: 24-MAR-2000

-------------------------------------------------------------------------------
The information in this article applies to:

- The Microsoft Foundation Classes (MFC) 
-------------------------------------------------------------------------------

SUMMARY
=======

This article explains how to display a context menu for a tree control in MFC.

MORE INFORMATION
================

On Windows platforms, the windowing subsystem encourages the developer to handle
context menu requests in top level windows. The traditional Windows programming
paradigm therefore concentrates the code for handling all of the context menu
requests in a few window and dialog procedures. However, with the advent of
object oriented programming a different solution can be embraced; that is to
handle the WM_CONTEXTMENU message within the control itself thereby creating
self-contained entities and objects. This method allows reuse of the control in
more than just one parent window and dialog.

In the case of a tree view control, the drag-and-drop functionality that it
embeds requires that special steps be taken in order to obtain independence from
the containing window. After the tree view control receives a WM_RBUTTONDOWN
message, messages are not forwarded by the control until a WM_RBUTTONUP message
is received. The control decides if a drag-and-drop operation was or was not
initiated.

- If the user did initiate a drag-and-drop operation, then USER32 generates a
  WM_CONTEXTMENU message and sends it to the tree view control. If the tree
  view control does not handle this message then the default window procedure
  forwards it to the control's parent window.

- If the user did not initiate a drag-and-drop operation then the control's
  window procedure sends a WM_NOTIFY (code NM_RCLICK) message and then a
  WM_CONTEXTMENU message to the parent window.

Consequently, consider the following three cases:

- When SHIFT+F10 is pressed and the control has the focus, a WM_CONTEXTMENU
  message is sent to the tree view control.

- When the user performs a drag-and-drop operation a WM_CONTEXTMENU message is
  sent to the tree view control.

- When the user right-clicks, a WM_NOTIFY (code NM_RCLICK) message is sent by
  the tree control to the control's parent. If you handle the reflected
  notification as shown below, the control displays the context menu in all
  situations.

To implement a context menu for a tree view control it is recommended that
message handlers for both the WM_CONTEXTMENU and reflected WM_NOTIFY (NM_RCLICK)
messages be implemented by the control. For example:

  BEGIN_MESSAGE_MAP(CMyTreeCtrl, CTreeCtrl)
  	//{{AFX_MSG_MAP(CMyTreeCtrl)
  	ON_NOTIFY_REFLECT(NM_RCLICK, OnRClick)
  	ON_WM_CONTEXTMENU()
  	//}}AFX_MSG_MAP
  END_MESSAGE_MAP()

  void CMyTreeCtrl::OnRClick(NMHDR* pNMHDR, LRESULT* pResult) 
  {
  	TRACE0("CMyTreeCtrl::OnRClick()\n");
  	// Send WM_CONTEXTMENU to self
  	SendMessage(WM_CONTEXTMENU, (WPARAM) m_hWnd, GetMessagePos());
  	// Mark message as handled and suppress default handling
  	*pResult = 1;
  }

  void CMyTreeCtrl::OnContextMenu(CWnd* pWnd, CPoint ptMousePos) 
  {
  	// if Shift-F10
  	if (ptMousePos.x == -1 && ptMousePos.y == -1)
  		ptMousePos = (CPoint) GetMessagePos();

  	ScreenToClient(&ptMousePos);

  	UINT uFlags;
  	HTREEITEM htItem;
  	
  	htItem = HitTest( ptMousePos, &uFlags );

  	if( htItem == NULL )
  		return;
  	
  	m_hActiveItem = htItem;

  	CMenu menu;
  	CMenu* pPopup;

  	// the font popup is stored in a resource
  	menu.LoadMenu(IDR_TREEITEM_CONTEXTMENU);
  	pPopup = menu.GetSubMenu(0);
  	ClientToScreen(&ptMousePos);
  	pPopup->TrackPopupMenu( TPM_LEFTALIGN, ptMousePos.x, ptMousePos.y, this );
  }

Additional query words: CTreeView popup menu context

======================================================================
Keywords          : kbCmnCtrls kbCtrl kbMenu kbMFC kbTreeView KbUIDesign kbVC kbGrpDSMFCATL 
Technology        : kbAudDeveloper kbMFC
Version           : winnt:
Issue type        : kbhowto
Handle a double click on the top node !!! 

 When a CTreeCtrl has an item selected, there is a WM_NOTIFY notification of TVN_SELCHANGED - See MSDN for details. As it also says in ...
You can specify a function to handle each of the messages you want to handle by adding an ON_NOTIFY_REFLECT macro in your control window's message map or by adding an ON_NOTIFY macro to your parent win
You can also traverse the contents of the tree control with functions that allow you to retrieve handles to parents, children, and siblings of a specified item.



Install ProductExplorer 
Create a directory for product 

Set up project file with: 
Remote URL 
Local Directory 
Then do initialize 
The path to git

write as a batch file 
cd <local_directory> 
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
git clone <URL> 
#git clone https://github.com/atdd-bdd/FeatureTest
git checkout document 
git add *
git remote add origin <URL>
git remote add origin https://github.com/atdd-bdd/FeatureTest.git 
Execute as 

https://optout.aboutads.info/?c=2&lang=EN
http://info.evidon.com/more_info/145326

git status 
Gives the status 

git fetch 
git merge origin/<master>
git pull origin document   - fetches everything 

Now everytime 
path= xxxx
cd <local_directory>
git checkout document 
git add *
git commit -m "<message>"
git push origin document

